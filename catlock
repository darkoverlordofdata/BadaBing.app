#!/usr/bin/env python3
"""Tested by Cat

re-write of catlock, using PyQt5

Screen lock program using assets generated by badabing
 
retain name catlock? Balthazar is still Test Kitty #1. 
I can't use it myself if it can't protect from my cat!


"""

import os, sys, getopt, getpass, pwd
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit
from PyQt5.QtGui import QIcon, QPixmap, QRegExpValidator, QFont, QImage
from PyQt5.QtCore import Qt, pyqtSlot, QRegExp, QTimer, QTime, QDateTime

class CatLock(QWidget):

    def __init__(self, pin, fontFamily, tz, width, height):
        """
        CatLock application
        """
        # Create widget
        super().__init__()

        self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.FramelessWindowHint)
        self.grabKeyboard()
        self.grabMouse()
        self.left = 0
        self.top = 0
        self.width = width
        self.height = height
        self.count = 0
        self.pin = pin
        self.fontFamily = fontFamily
        self.tz = tz

        user = pwd.getpwuid(os.getuid())
        self.full_name = user.pw_gecos

        with open(os.path.dirname(__file__) + '/Resources/themes/wallpaper.description') as f:
            self.title = f.readline()
            tmp = f.readline()
            self.info = tmp.split("(")[0]
            self.copyright = tmp.split("(")[1]

        self.authorize = QPixmap(os.path.dirname(__file__) + '/Resources/themes/wallpaper.authorize.jpg')
        self.locked = QPixmap(os.path.dirname(__file__) + '/Resources/themes/wallpaper.locked.jpg')

        self.setGeometry(self.left, self.top, self.width, self.height)

        home = os.getenv('HOME')
        if os.path.exists(f'/{home}/.iface'):
            self.avatar = QPixmap(f'{home}/.iface')
        else:
            self.avatar = QPixmap(os.path.dirname(__file__) + '/Resources/avatar.png')
    
        fnt_60 = QFont(self.fontFamily, 60, QFont.Normal)
        fnt_30 = QFont(self.fontFamily, 30, QFont.Normal)
        fnt_20 = QFont(self.fontFamily, 20, QFont.Normal)
        fnt_12 = QFont(self.fontFamily, 12, QFont.Normal)
        fnt_10 = QFont(self.fontFamily, 10, QFont.Normal)


        self.background = QLabel(self)
        self.background.setPixmap(self.locked)

        self.userpic = QLabel(self)
        self.userpic.setPixmap(self.avatar)
        self.userpic.move(self.width*.5 - self.userpic.width()*.5, self.height*.35)
        self.userpic.setVisible(False)

        self.username = QLabel(self)
        self.username.setFont(fnt_20)
        self.username.setText(self.full_name)
        self.username.move((self.width*.5)-(len(self.full_name)*.5)-(len(self.full_name)*6), self.height*.666-80)
        self.username.setStyleSheet("color: white")
        self.username.setVisible(False)

        self.textbox = QLineEdit(self)
        self.textbox.setEchoMode(QLineEdit.Password)
        # self.textbox.setFocusPolicy(Qt.StrongFocus)
        
        # https://stackoverflow.com/questions/1247762/regex-for-all-printable-characters
        reg_ex = QRegExp("\P{Cc}\P{Cn}\P{Cs}")
        input_validator = QRegExpValidator(reg_ex, self.textbox)
        self.textbox.setValidator(input_validator)
        self.textbox.move((self.width*.5)-140, self.height*.666)
        self.textbox.resize(280,40)
        # self.textbox.hide()
        self.textbox.setVisible(False)

        self.titlebox = QLabel(self)
        self.titlebox.setFont(fnt_20)
        self.titlebox.setText(self.title)
        self.titlebox.move(60, 40)
        self.titlebox.setStyleSheet("color: white")
        self.titlebox.setFocusPolicy(Qt.ClickFocus | Qt.TabFocus | Qt.NoFocus)
  
        self.infobox = QLabel(self)
        self.infobox.setFont(fnt_12)
        self.infobox.setText(self.info)
        self.infobox.move(60, 80)
        self.infobox.setStyleSheet("color: white")

        self.copybox = QLabel(self)
        self.copybox.setFont(fnt_10)
        self.copybox.setText(self.copyright[:-1])
        self.copybox.move(60, 110)
        self.copybox.setStyleSheet("color: white")

        self.clock = QLabel(self)
        self.clock.setFont(fnt_60)
        self.clock.move(60, 530)
        self.clock.setStyleSheet("color: white")

        self.calendar = QLabel(self)        
        self.calendar.setFont(fnt_30)
        self.calendar.move(60, 650)
        self.calendar.setStyleSheet("color: white")

        self.showTime()
        self.clock.show()
        self.calendar.show()

        timer = QTimer(self)
        timer.timeout.connect(self.showTime)
        timer.start(1000) # update every second

        self.show()

    def showTime(self):
        currentTime = QDateTime.currentDateTime()
        adj = 60*60*(self.tz) # 'cause i'm stuck in EDT
        currentTime = currentTime.addSecs(adj)

        self.clock.setText(currentTime.toString('h:mm a'))
        self.calendar.setText(currentTime.toString('dddd, MMMM d'))

    def keyPressEvent(self, event):
        """
        decode the keypress:

            Key_Escape
                kills input, relock screen

            Key_Return
                force check of valid pin
                clear input buffer

            Key_Backspace
                as expected

        """
        if event.key() == Qt.Key_Escape:
            # self.count += 1
            # if self.count > 10:
            #     self.close() 
            # else: 
            self.background.setPixmap(self.locked)
            self.textbox.setText("")
            # self.textbox.hide()
            self.textbox.setVisible(False)
            self.username.setVisible(False)
            self.userpic.setVisible(False)

        elif event.key() == Qt.Key_Return:
            if self.textbox.text() == self.pin:
                self.exitLock()
            self.textbox.clear()

        elif event.key() == Qt.Key_Backspace:
            if self.textbox.hasFocus():
                self.textbox.backspace()
            else:
                self.textbox.setText(self.textbox.text()[:-1])

        else:
            if self.textbox.isHidden():
                self.background.setPixmap(self.authorize)
                self.username.setVisible(True)
                self.textbox.setVisible(True)
                self.userpic.setVisible(True)
                # self.textbox.show()
                self.textbox.setText(event.text())
            else:
                if self.textbox.hasFocus():
                    if self.textbox.text() == self.pin:
                        self.exitLock()
                else:
                    self.textbox.setText(self.textbox.text()+event.text())
                    if self.textbox.text() == self.pin:
                        self.exitLock()

    def exitLock(self):
        """
        exit screen lock
        """
        self.releaseKeyboard()
        self.releaseMouse()
        self.close()



if __name__ == '__main__':
    """
    run environment
    """
    pin = '1234'
    fontFamily = 'Noto Sans'
    tz = -3
    width = 1368
    height = 768

    try:
        opts, args = getopt.getopt(sys.argv[1:], 
                                        "hp:f:t:w:h", 
                                        [ 
                                            "help",
                                            "pin=",
                                            "font=",
                                            "tz=",
                                            "width=",
                                            "height="
                                        ])
    except getopt.GetoptError:  
        print('binglock.py --pin <secret>')
        sys.exit(2)
    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            print('Usage:')
            print("catlock [OPTION?]")
            print("")
            print("Help Options:")
            print("-h, --help           Show help options")
            print("")
            print("Application Options:")
            print("--pin                lock number")
            print("--font               font family")
            print("--tz                 time zone correction")
            print("--height             Screen height")
            print("--width              Screen width")
            print("")
            sys.exit()
        elif opt in ["-p", "--pin"]:
            pin = arg
        elif opt in ["-f", "--font"]:
            fontFamily = arg
        elif opt in ["-t", "--tz"]:
            tz = int(arg)
        elif opt in ["-h", "--height"]:
            height = int(arg)
        elif opt in ["-w", "--width"]:
            width = int(arg)

    app = QApplication(sys.argv)
    ex = CatLock(pin, fontFamily, tz, width, height)
    sys.exit(app.exec_())
