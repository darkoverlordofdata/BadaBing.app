#!/usr/bin/env python3
"""binglock

Screen lock program using assets generated by badabing

"""

import sys, getopt
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit
from PyQt5.QtGui import QIcon, QPixmap, QRegExpValidator
from PyQt5.QtCore import Qt, pyqtSlot, QRegExp

pin = ''

class BingLock(QWidget):

    def __init__(self):
        """
        BingLock application
        """
        
        super().__init__()
        self.count = 0
        self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.FramelessWindowHint)
        self.title = 'ScreenLock'
        self.left = 0
        self.top = 0
        self.width = 1368
        self.height = 768
        self.label = QLabel(self)
        self.authorize = QPixmap('/home/darko/.local/share/catlock/themes/wallpaper.authorize.jpg')
        self.locked = QPixmap('/home/darko/.local/share/catlock/themes/wallpaper.locked.jpg')
        self.setGeometry(self.left, self.top, self.width, self.height)
    
        # Create widget
        self.label.setPixmap(self.locked)

        self.textbox = QLineEdit(self)
        self.textbox.setEchoMode(QLineEdit.Password)
        self.textbox.setFocusPolicy(Qt.StrongFocus)
        # https://stackoverflow.com/questions/1247762/regex-for-all-printable-characters
        reg_ex = QRegExp("\P{Cc}\P{Cn}\P{Cs}")
        input_validator = QRegExpValidator(reg_ex, self.textbox)
        self.textbox.setValidator(input_validator)
        self.textbox.move((self.width*.5)-140, self.height*.8)
        self.textbox.resize(280,40)
        self.textbox.hide()
        self.show()

    def keyPressEvent(self, event):
        """
        decode the keypress:

            Key_Escape
                kills input, relock screen

            Key_Return
                force check of valid pin
                clear input buffer

            Key_Backspace
                as expected

        """
        if event.key() == Qt.Key_Escape:
            # self.count += 1
            # if self.count > 10:
            #     self.close() 
            # else: 
            self.label.setPixmap(self.locked)
            self.textbox.setText("")
            self.textbox.hide()

        elif event.key() == Qt.Key_Return:
            if self.textbox.text() == pin:
                self.close() 
            self.textbox.clear()

        elif event.key() == Qt.Key_Backspace:
            self.textbox.setText(self.textbox.text()[:-1])

        else:
            if self.textbox.isHidden():
                self.label.setPixmap(self.authorize)
                self.textbox.show()
                self.textbox.setText(event.text())
            else:
                if self.textbox.hasFocus():
                    if self.textbox.text() == pin:
                        self.close() 
                else:
                    self.textbox.setText(self.textbox.text()+event.text())
                    if self.textbox.text() == pin:
                        self.close() 

    

if __name__ == '__main__':

    try:
        opts, args = getopt.getopt(sys.argv[1:], "p:", ["pin="])
    except getopt.GetoptError:
        print('binglock.py --pin <secret>')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print('binglock.py --pin <secret>')
            sys.exit()
        elif opt in ["-p", "--pin"]:
            pin = arg

    app = QApplication(sys.argv)
    ex = BingLock()
    sys.exit(app.exec_())
